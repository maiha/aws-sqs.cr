# Generated by gen-code.cr
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

module Aws::SQS::Types
  module Input
    abstract def fill(params : HTTP::Params, serializer)
  end

  record AWSAccountIdList

  record ActionNameList

  record AddPermissionRequest,
    queue_url       : String,
    label           : String,
    aws_account_ids : AWSAccountIdList,
    actions         : ActionNameList do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Label"] = serializer.serialize(label) if !label.nil?
      params["AWSAccountIds"] = serializer.serialize(aws_account_ids) if !aws_account_ids.nil?
      params["Actions"] = serializer.serialize(actions) if !actions.nil?
    end
  end

  record AttributeNameList

  record BatchEntryIdsNotDistinct

  record BatchRequestTooLong

  record BatchResultErrorEntry,
    id           : String,
    sender_fault : Boolean,
    code         : String,
    message      : String?

  record BatchResultErrorEntryList

  record Binary

  record BinaryList

  record Boolean

  record BoxedInteger

  record ChangeMessageVisibilityBatchRequest,
    queue_url : String,
    entries   : ChangeMessageVisibilityBatchRequestEntryList do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Entries"] = serializer.serialize(entries) if !entries.nil?
    end
  end

  record ChangeMessageVisibilityBatchRequestEntry,
    id                 : String,
    receipt_handle     : String,
    visibility_timeout : Integer?

  record ChangeMessageVisibilityBatchRequestEntryList

  record ChangeMessageVisibilityBatchResult,
    successful : ChangeMessageVisibilityBatchResultEntryList,
    failed     : BatchResultErrorEntryList

  record ChangeMessageVisibilityBatchResultEntry,
    id : String

  record ChangeMessageVisibilityBatchResultEntryList

  record ChangeMessageVisibilityRequest,
    queue_url          : String,
    receipt_handle     : String,
    visibility_timeout : Integer do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["ReceiptHandle"] = serializer.serialize(receipt_handle) if !receipt_handle.nil?
      params["VisibilityTimeout"] = serializer.serialize(visibility_timeout) if !visibility_timeout.nil?
    end
  end

  record CreateQueueRequest,
    queue_name : String,
    attributes : QueueAttributeMap?,
    tags       : TagMap? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueName"] = serializer.serialize(queue_name) if !queue_name.nil?
      params["Attributes"] = serializer.serialize(attributes) if !attributes.nil?
      params["tags"] = serializer.serialize(tags) if !tags.nil?
    end
  end

  record CreateQueueResult,
    queue_url : String?

  record DeleteMessageBatchRequest,
    queue_url : String,
    entries   : DeleteMessageBatchRequestEntryList do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Entries"] = serializer.serialize(entries) if !entries.nil?
    end
  end

  record DeleteMessageBatchRequestEntry,
    id             : String,
    receipt_handle : String

  record DeleteMessageBatchRequestEntryList

  record DeleteMessageBatchResult,
    successful : DeleteMessageBatchResultEntryList,
    failed     : BatchResultErrorEntryList

  record DeleteMessageBatchResultEntry,
    id : String

  record DeleteMessageBatchResultEntryList

  record DeleteMessageRequest,
    queue_url      : String,
    receipt_handle : String do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["ReceiptHandle"] = serializer.serialize(receipt_handle) if !receipt_handle.nil?
    end
  end

  record DeleteQueueRequest,
    queue_url : String do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
    end
  end

  record EmptyBatchRequest do

    include Input

    def fill(params : HTTP::Params, serializer)
    end
  end

  record GetQueueAttributesRequest,
    queue_url       : String,
    attribute_names : AttributeNameList? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["AttributeNames"] = serializer.serialize(attribute_names) if !attribute_names.nil?
    end
  end

  record GetQueueAttributesResult,
    attributes : QueueAttributeMap?

  record GetQueueUrlRequest,
    queue_name                 : String,
    queue_owner_aws_account_id : String? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueName"] = serializer.serialize(queue_name) if !queue_name.nil?
      params["QueueOwnerAWSAccountId"] = serializer.serialize(queue_owner_aws_account_id) if !queue_owner_aws_account_id.nil?
    end
  end

  record GetQueueUrlResult,
    queue_url : String?

  record Integer

  record InvalidAttributeName

  record InvalidBatchEntryId

  record InvalidIdFormat

  record InvalidMessageContents

  record ListDeadLetterSourceQueuesRequest,
    queue_url   : String,
    next_token  : Token?,
    max_results : BoxedInteger? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["NextToken"] = serializer.serialize(next_token) if !next_token.nil?
      params["MaxResults"] = serializer.serialize(max_results) if !max_results.nil?
    end
  end

  record ListDeadLetterSourceQueuesResult,
    queue_urls : QueueUrlList,
    next_token : Token?

  record ListQueueTagsRequest,
    queue_url : String do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
    end
  end

  record ListQueueTagsResult,
    tags : TagMap?

  record ListQueuesRequest,
    queue_name_prefix : String?,
    next_token        : Token?,
    max_results       : BoxedInteger? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueNamePrefix"] = serializer.serialize(queue_name_prefix) if !queue_name_prefix.nil?
      params["NextToken"] = serializer.serialize(next_token) if !next_token.nil?
      params["MaxResults"] = serializer.serialize(max_results) if !max_results.nil?
    end
  end

  record ListQueuesResult,
    queue_urls : QueueUrlList?,
    next_token : Token?

  record Message,
    message_id                : String?,
    receipt_handle            : String?,
    md5_of_body               : String?,
    body                      : String?,
    attributes                : MessageSystemAttributeMap?,
    md5_of_message_attributes : String?,
    message_attributes        : MessageBodyAttributeMap?

  record MessageAttributeName

  record MessageAttributeNameList

  record MessageAttributeValue,
    string_value       : String?,
    binary_value       : Binary?,
    string_list_values : StringList?,
    binary_list_values : BinaryList?,
    data_type          : String

  record MessageBodyAttributeMap

  record MessageBodySystemAttributeMap

  record MessageList

  record MessageNotInflight

  record MessageSystemAttributeMap

  record MessageSystemAttributeName

  record MessageSystemAttributeNameForSends

  record MessageSystemAttributeValue,
    string_value       : String?,
    binary_value       : Binary?,
    string_list_values : StringList?,
    binary_list_values : BinaryList?,
    data_type          : String

  record OverLimit

  record PurgeQueueInProgress

  record PurgeQueueRequest,
    queue_url : String do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
    end
  end

  record QueueAttributeMap

  record QueueAttributeName

  record QueueDeletedRecently

  record QueueDoesNotExist

  record QueueNameExists

  record QueueUrlList

  record ReceiptHandleIsInvalid

  record ReceiveMessageRequest,
    queue_url                  : String,
    attribute_names            : AttributeNameList?,
    message_attribute_names    : MessageAttributeNameList?,
    max_number_of_messages     : Integer?,
    visibility_timeout         : Integer?,
    wait_time_seconds          : Integer?,
    receive_request_attempt_id : String? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["AttributeNames"] = serializer.serialize(attribute_names) if !attribute_names.nil?
      params["MessageAttributeNames"] = serializer.serialize(message_attribute_names) if !message_attribute_names.nil?
      params["MaxNumberOfMessages"] = serializer.serialize(max_number_of_messages) if !max_number_of_messages.nil?
      params["VisibilityTimeout"] = serializer.serialize(visibility_timeout) if !visibility_timeout.nil?
      params["WaitTimeSeconds"] = serializer.serialize(wait_time_seconds) if !wait_time_seconds.nil?
      params["ReceiveRequestAttemptId"] = serializer.serialize(receive_request_attempt_id) if !receive_request_attempt_id.nil?
    end
  end

  record ReceiveMessageResult,
    messages : MessageList?

  record RemovePermissionRequest,
    queue_url : String,
    label     : String do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Label"] = serializer.serialize(label) if !label.nil?
    end
  end

  record SendMessageBatchRequest,
    queue_url : String,
    entries   : SendMessageBatchRequestEntryList do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Entries"] = serializer.serialize(entries) if !entries.nil?
    end
  end

  record SendMessageBatchRequestEntry,
    id                        : String,
    message_body              : String,
    delay_seconds             : Integer?,
    message_attributes        : MessageBodyAttributeMap?,
    message_system_attributes : MessageBodySystemAttributeMap?,
    message_deduplication_id  : String?,
    message_group_id          : String?

  record SendMessageBatchRequestEntryList

  record SendMessageBatchResult,
    successful : SendMessageBatchResultEntryList,
    failed     : BatchResultErrorEntryList

  record SendMessageBatchResultEntry,
    id                               : String,
    message_id                       : String,
    md5_of_message_body              : String,
    md5_of_message_attributes        : String?,
    md5_of_message_system_attributes : String?,
    sequence_number                  : String?

  record SendMessageBatchResultEntryList

  record SendMessageRequest,
    queue_url                 : String,
    message_body              : String,
    delay_seconds             : Integer?,
    message_attributes        : MessageBodyAttributeMap?,
    message_system_attributes : MessageBodySystemAttributeMap?,
    message_deduplication_id  : String?,
    message_group_id          : String? do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["MessageBody"] = serializer.serialize(message_body) if !message_body.nil?
      params["DelaySeconds"] = serializer.serialize(delay_seconds) if !delay_seconds.nil?
      params["MessageAttributes"] = serializer.serialize(message_attributes) if !message_attributes.nil?
      params["MessageSystemAttributes"] = serializer.serialize(message_system_attributes) if !message_system_attributes.nil?
      params["MessageDeduplicationId"] = serializer.serialize(message_deduplication_id) if !message_deduplication_id.nil?
      params["MessageGroupId"] = serializer.serialize(message_group_id) if !message_group_id.nil?
    end
  end

  record SendMessageResult,
    md5_of_message_body              : String?,
    md5_of_message_attributes        : String?,
    md5_of_message_system_attributes : String?,
    message_id                       : String?,
    sequence_number                  : String?

  record SetQueueAttributesRequest,
    queue_url  : String,
    attributes : QueueAttributeMap do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Attributes"] = serializer.serialize(attributes) if !attributes.nil?
    end
  end

  record StringList

  record TagKey

  record TagKeyList

  record TagMap

  record TagQueueRequest,
    queue_url : String,
    tags      : TagMap do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["Tags"] = serializer.serialize(tags) if !tags.nil?
    end
  end

  record TagValue

  record Token

  record TooManyEntriesInBatchRequest do

    include Input

    def fill(params : HTTP::Params, serializer)
    end
  end

  record UnsupportedOperation

  record UntagQueueRequest,
    queue_url : String,
    tag_keys  : TagKeyList do

    include Input

    def fill(params : HTTP::Params, serializer)
      params["QueueUrl"] = serializer.serialize(queue_url) if !queue_url.nil?
      params["TagKeys"] = serializer.serialize(tag_keys) if !tag_keys.nil?
    end
  end

end
