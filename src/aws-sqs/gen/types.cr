# Generated by codegen.cr
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

module Aws::SQS
  class Response(I, R)
    getter input : I
    getter response : HTTP::Client::Response
    delegate status, body, to: @response

    def initialize(@input, @response)
    end
  end
end

module Aws::SQS::Types
  module Input
    abstract def set_params(params : HTTP::Params, serializer)
  end

  module InputList
  end

  module Output
  end

  record AWSAccountIdList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "AWSAccountId.#{i+1}", value: v)
      end}
    end
  end

  record ActionNameList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "ActionName.#{i+1}", value: v)
      end}
    end
  end

  record AddPermissionRequest,
    queue_url       : String,
    label           : String,
    aws_account_ids : AWSAccountIdList,
    actions         : ActionNameList  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Label", value: label) if !label.nil?
      serializer.set_params(params, serializer, name: "AWSAccountIds", value: aws_account_ids) if !aws_account_ids.nil?
      serializer.set_params(params, serializer, name: "Actions", value: actions) if !actions.nil?
    end
  end

  record AttributeNameList,
    list : Array(QueueAttributeName) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "AttributeName.#{i+1}", value: v)
      end}
    end
  end

  record BatchEntryIdsNotDistinct

  record BatchRequestTooLong

  record BatchResultErrorEntry,
    id           : String,
    sender_fault : Bool,
    code         : String,
    message      : String?

  record BatchResultErrorEntryList,
    list : Array(BatchResultErrorEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "BatchResultErrorEntry.#{i+1}", value: v)
      end}
    end
  end

  record Binary

  record BinaryList,
    list : Array(Binary) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "BinaryListValue.#{i+1}", value: v)
      end}
    end
  end

  record Boolean

  record ChangeMessageVisibilityBatchRequest,
    queue_url : String,
    entries   : ChangeMessageVisibilityBatchRequestEntryList  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Entries", value: entries) if !entries.nil?
    end
  end

  record ChangeMessageVisibilityBatchRequestEntry,
    id                 : String,
    receipt_handle     : String,
    visibility_timeout : Int32?

  record ChangeMessageVisibilityBatchRequestEntryList,
    list : Array(ChangeMessageVisibilityBatchRequestEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "ChangeMessageVisibilityBatchRequestEntry.#{i+1}", value: v)
      end}
    end
  end

  record ChangeMessageVisibilityBatchResult,
    successful : ChangeMessageVisibilityBatchResultEntryList,
    failed     : BatchResultErrorEntryList  do

    include Output
  end

  record ChangeMessageVisibilityBatchResultEntry,
    id : String

  record ChangeMessageVisibilityBatchResultEntryList,
    list : Array(ChangeMessageVisibilityBatchResultEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "ChangeMessageVisibilityBatchResultEntry.#{i+1}", value: v)
      end}
    end
  end

  record ChangeMessageVisibilityRequest,
    queue_url          : String,
    receipt_handle     : String,
    visibility_timeout : Int32  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "ReceiptHandle", value: receipt_handle) if !receipt_handle.nil?
      serializer.set_params(params, serializer, name: "VisibilityTimeout", value: visibility_timeout) if !visibility_timeout.nil?
    end
  end

  record CreateQueueRequest,
    queue_name : String,
    attributes : QueueAttributeMap?,
    tags       : TagMap?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueName", value: queue_name) if !queue_name.nil?
      serializer.set_params(params, serializer, name: "Attributes", value: attributes) if !attributes.nil?
      serializer.set_params(params, serializer, name: "tags", value: tags) if !tags.nil?
    end
  end

  record CreateQueueResult,
    queue_url : String?  do

    include Output
  end

  record DeleteMessageBatchRequest,
    queue_url : String,
    entries   : DeleteMessageBatchRequestEntryList  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Entries", value: entries) if !entries.nil?
    end
  end

  record DeleteMessageBatchRequestEntry,
    id             : String,
    receipt_handle : String

  record DeleteMessageBatchRequestEntryList,
    list : Array(DeleteMessageBatchRequestEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "DeleteMessageBatchRequestEntry.#{i+1}", value: v)
      end}
    end
  end

  record DeleteMessageBatchResult,
    successful : DeleteMessageBatchResultEntryList,
    failed     : BatchResultErrorEntryList  do

    include Output
  end

  record DeleteMessageBatchResultEntry,
    id : String

  record DeleteMessageBatchResultEntryList,
    list : Array(DeleteMessageBatchResultEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "DeleteMessageBatchResultEntry.#{i+1}", value: v)
      end}
    end
  end

  record DeleteMessageRequest,
    queue_url      : String,
    receipt_handle : String  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "ReceiptHandle", value: receipt_handle) if !receipt_handle.nil?
    end
  end

  record DeleteQueueRequest,
    queue_url : String  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
    end
  end

  record EmptyBatchRequest  do

    include Input

    def set_params(params : HTTP::Params, serializer)
    end
  end

  record GetQueueAttributesRequest,
    queue_url       : String,
    attribute_names : AttributeNameList?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "AttributeNames", value: attribute_names) if !attribute_names.nil?
    end
  end

  record GetQueueAttributesResult,
    attributes : QueueAttributeMap?  do

    include Output
  end

  record GetQueueUrlRequest,
    queue_name                 : String,
    queue_owner_aws_account_id : String?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueName", value: queue_name) if !queue_name.nil?
      serializer.set_params(params, serializer, name: "QueueOwnerAWSAccountId", value: queue_owner_aws_account_id) if !queue_owner_aws_account_id.nil?
    end
  end

  record GetQueueUrlResult,
    queue_url : String?  do

    include Output
  end

  record Integer

  record InvalidAttributeName

  record InvalidBatchEntryId

  record InvalidIdFormat

  record InvalidMessageContents

  record ListDeadLetterSourceQueuesRequest,
    queue_url   : String,
    next_token  : String?,
    max_results : Int32?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "NextToken", value: next_token) if !next_token.nil?
      serializer.set_params(params, serializer, name: "MaxResults", value: max_results) if !max_results.nil?
    end
  end

  record ListDeadLetterSourceQueuesResult,
    queue_urls : QueueUrlList,
    next_token : String?  do

    include Output
  end

  record ListQueueTagsRequest,
    queue_url : String  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
    end
  end

  record ListQueueTagsResult,
    tags : TagMap?  do

    include Output
  end

  record ListQueuesRequest,
    queue_name_prefix : String?,
    next_token        : String?,
    max_results       : Int32?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueNamePrefix", value: queue_name_prefix) if !queue_name_prefix.nil?
      serializer.set_params(params, serializer, name: "NextToken", value: next_token) if !next_token.nil?
      serializer.set_params(params, serializer, name: "MaxResults", value: max_results) if !max_results.nil?
    end
  end

  record ListQueuesResult,
    queue_urls : QueueUrlList?,
    next_token : String?  do

    include Output
  end

  record Message,
    message_id                : String?,
    receipt_handle            : String?,
    md5_of_body               : String?,
    body                      : String?,
    attributes                : MessageSystemAttributeMap?,
    md5_of_message_attributes : String?,
    message_attributes        : MessageBodyAttributeMap?

  record MessageAttributeName

  record MessageAttributeNameList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "MessageAttributeName.#{i+1}", value: v)
      end}
    end
  end

  record MessageAttributeValue,
    string_value       : String?,
    binary_value       : Binary?,
    string_list_values : StringList?,
    binary_list_values : BinaryList?,
    data_type          : String

  record MessageBodyAttributeMap

  record MessageBodySystemAttributeMap

  record MessageList,
    list : Array(Message) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "Message.#{i+1}", value: v)
      end}
    end
  end

  record MessageNotInflight

  record MessageSystemAttributeMap

  enum MessageSystemAttributeName
    SenderId
    SentTimestamp
    ApproximateReceiveCount
    ApproximateFirstReceiveTimestamp
    SequenceNumber
    MessageDeduplicationId
    MessageGroupId
    AWSTraceHeader
  end


  enum MessageSystemAttributeNameForSends
    AWSTraceHeader
  end


  record MessageSystemAttributeValue,
    string_value       : String?,
    binary_value       : Binary?,
    string_list_values : StringList?,
    binary_list_values : BinaryList?,
    data_type          : String

  record OverLimit

  record PurgeQueueInProgress

  record PurgeQueueRequest,
    queue_url : String  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
    end
  end

  record QueueAttributeMap

  enum QueueAttributeName
    All
    Policy
    VisibilityTimeout
    MaximumMessageSize
    MessageRetentionPeriod
    ApproximateNumberOfMessages
    ApproximateNumberOfMessagesNotVisible
    CreatedTimestamp
    LastModifiedTimestamp
    QueueArn
    ApproximateNumberOfMessagesDelayed
    DelaySeconds
    ReceiveMessageWaitTimeSeconds
    RedrivePolicy
    FifoQueue
    ContentBasedDeduplication
    KmsMasterKeyId
    KmsDataKeyReusePeriodSeconds
    DeduplicationScope
    FifoThroughputLimit
  end


  record QueueDeletedRecently

  record QueueDoesNotExist

  record QueueNameExists

  record QueueUrlList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "QueueUrl.#{i+1}", value: v)
      end}
    end
  end

  record ReceiptHandleIsInvalid

  record ReceiveMessageRequest,
    queue_url                  : String,
    attribute_names            : AttributeNameList?,
    message_attribute_names    : MessageAttributeNameList?,
    max_number_of_messages     : Int32?,
    visibility_timeout         : Int32?,
    wait_time_seconds          : Int32?,
    receive_request_attempt_id : String?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "AttributeNames", value: attribute_names) if !attribute_names.nil?
      serializer.set_params(params, serializer, name: "MessageAttributeNames", value: message_attribute_names) if !message_attribute_names.nil?
      serializer.set_params(params, serializer, name: "MaxNumberOfMessages", value: max_number_of_messages) if !max_number_of_messages.nil?
      serializer.set_params(params, serializer, name: "VisibilityTimeout", value: visibility_timeout) if !visibility_timeout.nil?
      serializer.set_params(params, serializer, name: "WaitTimeSeconds", value: wait_time_seconds) if !wait_time_seconds.nil?
      serializer.set_params(params, serializer, name: "ReceiveRequestAttemptId", value: receive_request_attempt_id) if !receive_request_attempt_id.nil?
    end
  end

  record ReceiveMessageResult,
    messages : MessageList?  do

    include Output
  end

  record RemovePermissionRequest,
    queue_url : String,
    label     : String  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Label", value: label) if !label.nil?
    end
  end

  record SendMessageBatchRequest,
    queue_url : String,
    entries   : SendMessageBatchRequestEntryList  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Entries", value: entries) if !entries.nil?
    end
  end

  record SendMessageBatchRequestEntry,
    id                        : String,
    message_body              : String,
    delay_seconds             : Int32?,
    message_attributes        : MessageBodyAttributeMap?,
    message_system_attributes : MessageBodySystemAttributeMap?,
    message_deduplication_id  : String?,
    message_group_id          : String?

  record SendMessageBatchRequestEntryList,
    list : Array(SendMessageBatchRequestEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "SendMessageBatchRequestEntry.#{i+1}", value: v)
      end}
    end
  end

  record SendMessageBatchResult,
    successful : SendMessageBatchResultEntryList,
    failed     : BatchResultErrorEntryList  do

    include Output
  end

  record SendMessageBatchResultEntry,
    id                               : String,
    message_id                       : String,
    md5_of_message_body              : String,
    md5_of_message_attributes        : String?,
    md5_of_message_system_attributes : String?,
    sequence_number                  : String?

  record SendMessageBatchResultEntryList,
    list : Array(SendMessageBatchResultEntry) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "SendMessageBatchResultEntry.#{i+1}", value: v)
      end}
    end
  end

  record SendMessageRequest,
    queue_url                 : String,
    message_body              : String,
    delay_seconds             : Int32?,
    message_attributes        : MessageBodyAttributeMap?,
    message_system_attributes : MessageBodySystemAttributeMap?,
    message_deduplication_id  : String?,
    message_group_id          : String?  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "MessageBody", value: message_body) if !message_body.nil?
      serializer.set_params(params, serializer, name: "DelaySeconds", value: delay_seconds) if !delay_seconds.nil?
      serializer.set_params(params, serializer, name: "MessageAttributes", value: message_attributes) if !message_attributes.nil?
      serializer.set_params(params, serializer, name: "MessageSystemAttributes", value: message_system_attributes) if !message_system_attributes.nil?
      serializer.set_params(params, serializer, name: "MessageDeduplicationId", value: message_deduplication_id) if !message_deduplication_id.nil?
      serializer.set_params(params, serializer, name: "MessageGroupId", value: message_group_id) if !message_group_id.nil?
    end
  end

  record SendMessageResult,
    md5_of_message_body              : String?,
    md5_of_message_attributes        : String?,
    md5_of_message_system_attributes : String?,
    message_id                       : String?,
    sequence_number                  : String?  do

    include Output
  end

  record SetQueueAttributesRequest,
    queue_url  : String,
    attributes : QueueAttributeMap  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Attributes", value: attributes) if !attributes.nil?
    end
  end

  record StringList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "StringListValue.#{i+1}", value: v)
      end}
    end
  end

  record TagKey

  record TagKeyList,
    list : Array(String) do

    include Input
    include InputList

    def set_params(params : HTTP::Params, serializer)
      list.try{|_list| _list.each_with_index do |v, i|
        serializer.set_params(params, serializer, name: "TagKey.#{i+1}", value: v)
      end}
    end
  end

  record TagMap

  record TagQueueRequest,
    queue_url : String,
    tags      : TagMap  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "Tags", value: tags) if !tags.nil?
    end
  end

  record TagValue

  record Token

  record TooManyEntriesInBatchRequest  do

    include Input

    def set_params(params : HTTP::Params, serializer)
    end
  end

  record UnsupportedOperation

  record UntagQueueRequest,
    queue_url : String,
    tag_keys  : TagKeyList  do

    include Input

    def set_params(params : HTTP::Params, serializer)
      serializer.set_params(params, serializer, name: "QueueUrl", value: queue_url) if !queue_url.nil?
      serializer.set_params(params, serializer, name: "TagKeys", value: tag_keys) if !tag_keys.nil?
    end
  end

  class AddPermissionResponse(I, R) < Response(I, R)
  end
  class ChangeMessageVisibilityResponse(I, R) < Response(I, R)
  end
  class ChangeMessageVisibilityBatchResponse(I, R) < Response(I, R)
  end
  class CreateQueueResponse(I, R) < Response(I, R)
  end
  class DeleteMessageResponse(I, R) < Response(I, R)
  end
  class DeleteMessageBatchResponse(I, R) < Response(I, R)
  end
  class DeleteQueueResponse(I, R) < Response(I, R)
  end
  class GetQueueAttributesResponse(I, R) < Response(I, R)
  end
  class GetQueueUrlResponse(I, R) < Response(I, R)
  end
  class ListDeadLetterSourceQueuesResponse(I, R) < Response(I, R)
  end
  class ListQueueTagsResponse(I, R) < Response(I, R)
  end
  class ListQueuesResponse(I, R) < Response(I, R)
  end
  class PurgeQueueResponse(I, R) < Response(I, R)
  end
  class ReceiveMessageResponse(I, R) < Response(I, R)
  end
  class RemovePermissionResponse(I, R) < Response(I, R)
  end
  class SendMessageResponse(I, R) < Response(I, R)
  end
  class SendMessageBatchResponse(I, R) < Response(I, R)
  end
  class SetQueueAttributesResponse(I, R) < Response(I, R)
  end
  class TagQueueResponse(I, R) < Response(I, R)
  end
  class UntagQueueResponse(I, R) < Response(I, R)
  end
end
